\contentsline {todo}{TO DO: review scope after thesis body is done >> scope well defined? scope matches content?3}{7}{section*.4}
\contentsline {todo}{TO DO: SFML not used}{7}{section*.5}
\contentsline {todo}{TO DO: review thesis, find unexplained acronyms }{8}{section*.6}
\contentsline {todo}{TO DO: CA basics: how rules are applied, show results graphically}{17}{section*.14}
\contentsline {todo}{TO DO: CA for simulations: Game of Life }{17}{section*.15}
\contentsline {todo}{TO DO: CA map gen, examples: Ultima Ratio Regum, Dwarf Fortress (2006), Minecraft }{17}{section*.16}
\contentsline {todo}{TO DO: MAIN GOAL OF THESIS: generating map with irregular, chaotic shapes - CA is sufficient }{17}{section*.17}
\contentsline {todo}{TO DO: Sportelli, Francesco \& Toto, Giuseppe \& Vessio, Gennaro. (2014). A Probabilistic Grammar for Procedural Content Generation. 10.13140/2.1.3820.4163. }{18}{section*.18}
\contentsline {todo}{TO DO: Shape grammars}{18}{section*.19}
\contentsline {todo}{TO DO: grammars not optimal for generating irregular shapes}{18}{section*.20}
\contentsline {todo}{TO DO: Genetic algorithms, constraint-based, Perlin noise, others mentioned in surveys}{18}{section*.21}
\contentsline {todo}{TO DO: short paragraph on the choice of CA for game maps - why CA and not other methods?}{18}{section*.22}
\contentsline {todo}{TO DO: what are pros and cons of such choice?}{18}{section*.23}
\contentsline {todo}{TO DO: desired characteristics of generated content: irregular, chaotic, resembling natural landmass}{18}{section*.24}
\contentsline {todo}{TO DO: desired feature: integrating manual editing and PCG - CA approach allows to edit between steps}{18}{section*.25}
\contentsline {todo}{TO DO: reduced human effort to create maps, as in other PCG solutions}{18}{section*.26}
\contentsline {todo}{TO DO: expand desired functions}{20}{section*.27}
\contentsline {todo}{TO DO: }{20}{section*.28}
\contentsline {todo}{TO DO: add missing non-functional requirements}{20}{section*.29}
\contentsline {todo}{TO DO: ?}{21}{section*.30}
\contentsline {todo}{TO DO: how do we store data?}{21}{section*.31}
\contentsline {todo}{TO DO: diagrams of cell, board}{21}{section*.32}
\contentsline {todo}{TO DO: exporting data from generator? }{21}{section*.33}
\contentsline {todo}{TO DO: how designers can get a complete map model? }{21}{section*.34}
\contentsline {todo}{TO DO: how a generator will work}{21}{section*.35}
\contentsline {todo}{TO DO: behavior diagrams}{21}{section*.36}
\contentsline {todo}{TO DO: OpenGL immediate mode paradigm}{21}{section*.37}
\contentsline {todo}{TO DO: imgui immediate mode user interface library}{21}{section*.38}
\contentsline {todo}{TO DO: diagram of texture class, used by Component MapGen, uses OpenGL}{22}{section*.40}
\contentsline {todo}{TO DO: mention Bret Victor talks - why we choose Immediate Mode}{22}{section*.41}
\contentsline {todo}{TO DO: why?}{23}{section*.43}
\contentsline {todo}{TO DO: add neighbor methods to board2}{23}{section*.46}
\contentsline {todo}{TO DO: result of what it all does?}{23}{section*.47}
\contentsline {todo}{TO DO: what else to include?}{24}{section*.48}
\contentsline {todo}{TO DO: describe how it all works now, with object diagrams}{24}{section*.49}
\contentsline {todo}{TO DO: refer to code itself}{24}{section*.50}
\contentsline {todo}{TO DO: future: expanding the generator}{25}{section*.52}
\contentsline {todo}{TO DO: future: adding more rules}{25}{section*.53}
\contentsline {todo}{TO DO: future: user defined cell types}{25}{section*.54}
\contentsline {todo}{TO DO: future: non-discrete cell states or more complex cell types }{25}{section*.55}
\contentsline {todo}{TO DO: future: 3d maps?}{25}{section*.56}
\contentsline {todo}{TO DO: include thesis defence documents}{32}{section*.61}
\contentsline {todo}{TO DO: attach 1}{32}{section*.62}
\contentsline {todo}{TO DO: attach 2}{32}{section*.63}
\contentsline {todo}{TO DO: attach 3}{32}{section*.64}
